---
layout: post
title: "A Simple Component"
author: Micha Niskin
---

Golf _components_ are reusable, self contained units from which the MVC views are created. Components are constructed from regular HTML, CSS, and JS. They are instantiated in your JS code and inserted into the DOM using jQuery.

This article goes past the simplistic "Hello, World":http://golf.github.com/hello-world-basic-usage-and-the-golf-dev-environment/ example, and demonstrates a simple MVC view and controller. The model is left as an exercise for a later article.

h2. Create The Application Directory Structure

Before we can start writing components we must first create the _components_ directory in the application root directory. This is the folder where all of the application's components must be located. Let's call our example application _golf-example_.

This is the overall directory structure we want:

bc. golf-example/
|-- controller.js
|-- components/
    |-- HelloWorld/
        |-- HelloWorld.html

So let's do this.

bc. mkdir golf-example
cd golf-example
mkdir components

Next, we will create the _components/HelloWorld_ directory. This is the folder that will contain all of the files and resources for the @HelloWorld@ component.

bc. mkdir components/HelloWorld

Inside of the _components_ directory you can make subdirectories in a way similar to Java's package system. Placing a component in the _components/com/example_ directory will cause the component to be in the @com.example@ namespace. But for now we'll keep things simple and not worry about namespaces yet.

h2. Give The Component Some HTML, CSS, And JavaScript

The component's structure and behavior is defined in an HTML file, _HelloWorld.html_. This file is located in the _HelloWorld_ directory and is where the HTML, CSS, and JavaScript for the component will be. If your component requires resources like images, for example, they would go in a directory named _HelloWorld.res_ in the _HelloWorld_ folder. For now we won't worry about component resources, though.

Create the file _components/HelloWorld/HelloWorld.html_, with the following contents:

{% highlight html linenos %}
<div>
  <style type="text/golf">
    div.container {
      border: 1px solid red;
    }
  </style>
  <script type="text/golf">
    function() {
      $(".container").append("<h1>Hello, world!</h1>");
    }
  </script>
  <div class="container"></div>
</div>
{% endhighlight %}

Notice how the component HTML markup is acting as a sort of template, into which the content is inserted by jQuery. This is a powerful pattern. The Golf server's JS proxy capability allows us to leverage this to the fullest. For now, though, our app is almost finished. All that remains is to write a simple controller.

h2. Write The Controller

Create the _controller.js_ file:

{% highlight javascript linenos %}
$.golf.controller = [
  { route: ".*",
    action: function(container, params) {
      container.empty().append(new Component.HelloWorld());
    }
  }
];
{% endhighlight %}

Note the @Component@ namespace that our component is in. This is true of all components. If we had created our component in the _components/com/example_ directory instead of just the _components_ directory, we would have needed to instantiate it like this:

bc. new Component.com.example.HelloWorld()

But we're keeping things simeple for now. Okay! It's time to test it out!

h2. Test The Application In Dev Mode

Start up the Golf dev mode server, like this:

bc. golf .

Then, open a browser and navigate to "http://localhost:4653/golf-example/#/home/":http://localhost:4653/golf-example/#/home/. You should see something similar to this:

!/images/simple-component.png!:/images/simple-component.png

As always, everything works fine without JS enabled in the browser, too.
