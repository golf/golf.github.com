---
layout: post
title: "Conventions 1: Directory Structure And Special Files"
author: Micha Niskin
---

Golf provides a fairly complex and flexible framework in which to build and deploy your web applications. One of the overriding design goals has been to simplify app development as much as possible.

In order to reduce the amount of time spent editing configuration files we chose _convention_ over _configuration_. Golf aims to provide a very consistent and predictable set of conventions and consistent, sensible defaults.

h2. Directory Structure

Golf applications are contained in a single directory. This directory is what we call the _app root directory_. Inside this directory there are a number of (optional) subdirectories that have special significance.

* *components* The _components_ directory contains all of the application's components. Within this directory is a heirarchy similar to the Java package system. The component namespace is determined by the location of the component directory. For example, the component located at _&lt;approot&gt;/components/com/example/Hello_ would be instantiated as @new Component.com.example.Hello()@.

* *plugins* The _plugins_ directory is where the jQuery plugins and component mixins are located. For example, if there is a script _&lt;approot&gt;/plugins/script.js_, you would load it from your JS code as @$.require("script")@ or @var script = $.require("script")@, etc.[1] 

* *scripts* Scripts placed in the _scripts_ directory are evaled in the global scope when the app first loads on the client. This is done after "domready" but before any other app code is run. Use scripts in this directory for installing global functions and objects. (Not jQuery plugins!)

* *styles* The _styles_ directory is where global CSS files go. They provide app-wide styling options (components *can* override these global styles with their own local styles, however).

Any other directories in the app root are considered to be global resources, and are accessible via the @$.golf.res@ object[2].

h2. Special Files

Certain files, if present, have special significance to the Golf server. These files can be used to modify the way the Golf server operates. Additionally, there are a few files that are created by the Golf server's startup process, and removed at when the server is shut down. Here is a comprehensive list of all of these special files.

* *forceclient.txt* The _forceclient.txt_ file, if present, ...

* *new.html* The _new.html_ file is created by the Golf server at runtime. It contains the HTML skeleton into which the Golf app is loaded. Don't mess with it, there isn't anything good you can do to it.

* *new.fc.html* The _new.fc.html_ file is created by the Golf server at runtime, also. Like the _new.html_ file, it contains an HTML skeleton page, but for clients that are not allowed to use proxy mode. Structurally it's the same, but the error message that is presented to the client if JS is disabled is different. Not much you want to do wtih this one either, so leave it alone.

* *error.html* The _error.html_ file, if present in the app root, will be sent in place of the standard Golf error page. It should be a complete HTML document. The tag @<%error%>@ in this file will be replaced with text describing the reason for the error.

* *head.html* The contents of the _head.html_ file, if present in the app root, are appended to the HTML skeleton page's @<head>@. This can be used to add metatags or tricky conditional css.

* *noscript.html* The _noscript.html_ file provides a way to customize the way the _new.html_ page looks to a client who disables JS after loading the app with JS enabled first. The _new.html_ page's @<noscript>@ tag's contents will be replaced with the contents of this file.

* *noscript.forceclient.html* The _noscript.forceclient.html_ file is analogous to the _noscript.html_ file, but it modifies the _new.fc.html_ file's appearance.

fn1. See "Plugins: Extending jQuery In Golf":/plugins-extending-jquery-in-golf/ and "Mixins: Extending The Component API":/mixins-extending-the-component-api/.

fn2. See "The Golf jQuery Plugin: The Clientside Environment":/the-golf-jquery-plugin-the-clientside-environment/.
