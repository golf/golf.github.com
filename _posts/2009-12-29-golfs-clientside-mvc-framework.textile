---
layout: post
title: "Golf's Clientside MVC Framework"
author: Micha Niskin
---

Golf apps are built on a simple, straightforward MVC architecture. Requests are delegated to a _controller_. The controller selects the corresponding _route_ (or routes) and passes the request off to the associated _action_. The action then instantiates up the appropriate _component_ and inserts it into the DOM. The component fetches data from the _model_ via AJAX, and updates the DOM as necessary.

h3(#mvc-diagram). The MVC Pattern

<notextile>
<pre>
<code>
                              -------        +-----------------+
     http://example.com/myapp/#/home/        | Document (DOM)  |<--+
                              -------        +-----------------+   |
                                 |                                 |
     URL hash changes ---------> |                                 |
     (page doesn't reload)       V           +-----------------+   |
                              ----------     |   Component A   |   |
     http://example.com/myapp/#/foo/bar/     +-----------------+   |
                              ----------                           |
                                  |                                |
                                  |                                |
                     +--JS EVENT--+          +-----------------+   |
                     |                   +-->|   Component B   |---+
                     V                   |   +-----------------+    
     +-------------------------------+   |            |             
 +---|           Controller          |   |            +----AJAX----+
 |   +-------------------------------+   |                         |
 |                                       |   +-----------------+   |
 |   +---------------+---------------+   |   |   Component C   |   |
 |   |   Route #1    |   Action #1   |   |   +-----------------+   |
 |   +---------------+---------------+   |                         |
 +-->|   Route #2    |   Action #2   |---+                         |
     +---------------+---------------+       +------+   +------+   |
     |   Route #3    |   Action #3   |       | Data |   | Data |<--+
     +---------------+---------------+       +------+   +------+   |
                                                                   |
                                             +------+   +------+   |
                                             | Data |   | Data |<--+
                                             +------+   +------+

</code>
</pre>
</notextile>

You can see that Golf provides a fairly standard implementation of the MVC pattern. Notice that the role of the MVC model is a webservice; the view is a Golf component, and the controller is the array of =={==_route_, _action_==}== tuples.

h2(#the-controller). The Controller

The main topic of this article is really the configuration of the app's controller. Views and models are covered in detail elsewhere (see above).

The actual controller code is deep within the Golf runtime. When you develop apps you configure it, similar to a "sinatra":http://www.sinatrarb.com/ app. When a request comes in, the controller looks for the @$.golf.controller@ array. This array must be set in the _controller.js_ source file in your app.

A simple _controller.js_ file may look like this:

{% highlight javascript %}
$.golf.controller = [
  { route: ".*",
    action: function(container, params) {
      var arg = params[0];
      container.empty().append(new Component.com.example.Test(arg));
    }
  }
];
{% endhighlight %}

This controller contains a single route which matches any URL hash (the "catchall" regex: @.*@), and the route's action instantiates and inserts inserts a component of type @Component.com.example.Test@ into the DOM.

h3(#routes). Routes

The @$.golf.controller@ array contains a number of objects, known as _routes_, each with a _route_ property and an _action_ property.

<div class="nounderline">
- %(type)&lt;string&gt;% @route@ := The _route_ property is a regular expression. This regular expression will be matched against the URL hash. If a successful match is achieved, then the associated _action_ will be called.
- %(type)&lt;bool&gt;% @action(@ %(type)&lt;jQuery&gt;% @container@, %(type)&lt;array&gt;% @params )@ := The _action_ property is a function that will be called upon a successful match of the URL hash against the _route_ property regex. This function instantiates components and inserts them into the DOM, thereby delegating control to the view. 
*container:* The DOM element into which the component(s) will be inserted.
*params:* The result of the regular expression match between the URL hash and the _route_ property.
*returns:* Return @true@ to allow controller to continue matching the URL hash against the rest of the routes (i.e. "fall-through").
</div>
